// This is a comment

// For context, KC is dynamically typed, so it will know what the variable's type is based off the value you assign to it.
// Currently, there are local and global variables, if, while, and for statements, logical operators like or and and, 
// string concatenation, numerical calculations like adding, subtracting, multiplying, dividing, as well as comparative
// operations like >, <, <=, >=.

// All statements need to be ended with a semicolon
1 + 2; // This won't actually print you anything until you use the print function

// This is how you declare variables:
var nameOfVariable; // This guy gets initialized to null
var nameOfVariable2 = 230;

// Strings are declared with double quotes:
var string = "Hello there!";

// Print statements don't need parenthesis for whatever needs to be printed
print "hello";
print "hello " + "-don't you dare say Hello World!";
print nameOfVariable;
print nameOfVariable2;

// Variables have scope, so if you declare a block with {}, that will encapsulate the variables within it to that scope.
// OH you also currently can only declare upto 256 local variables per-scope. That limit will go away (hopefully) as more optimizations are made.
var banana = "banana";
{
    var banana = 2000;
    print banana;
}
print banana;

// If statements currently need parenthesis, but later the option to declare them without will be added:
if (true == false) {
    print "true";
}
else if (1 == 1) {
    print "else if branch works!";
}
else {
    print "false";
}

// Another way to write them in one line:
if (null == null) print "Null equals Null";

// While loops are just like C, C++, JavaScript, Java, C#, and other C-like languages:
var x = 0;
while ("Hello" == "Hello" and x < 20) {
    print x;
    x = x + 1; // Sorry, ++, --, +=, -=, *=, and /= operations haven't been implemented yet
}

// For loops are just like how they are in C-based languages:
// Again, pardon the i = i + 1, since I need to implement the other operators mentioned in the comment in the while loop above.
for (var i = 0; i < 20; i = i + 1) {
    print i;
}

// You can also do infinite for loops like C-based languages:
//for (;;) {
//    print "Since I haven't implemented break statements yet,";
//    print "you're stuck in an infinite loop, hit ctrl + c to quit the application";
//}

// This is a sample function declaration
// You can have a maximum of 255 of these parameters
// don't do it! It'll throw you an error!
func repeatedSum(numTimes, lastSum) {
	var sum = lastSum;
	if (numTimes == 0) {
		return sum;
	}
	
	if (sum < 1) {
		sum = 1;
	}
	else {
		sum = sum * 2;
	}
	
	return repeatedSum(numTimes - 1, sum);
}

func badFib(n) {
	if (n < 2) return n;
	
	return badFib(n-2) + badFib(n-1);
}

print "Now going to use a built-in function from C for time.";
var start_time = clock();
print repeatedSum(10, 1);
var elapsed_time = clock() - start_time;
print elapsed_time; print " seconds. Now running a really bad recursive fibonacci sequence:";
start_time = clock();
print badFib(20); // This gets exponentially longer to run as you surpass 35 and into 40
elapsed_time = clock() - start_time;
print elapsed_time; print " seconds.";




// More features will be added here as the feature list grows.
// Functions will be coming soon